#!/usr/bin/env python2
import io
import os
import re
import sys
import json
import time
import base64
import inspect
import webbrowser
import urllib
import urllib2
import select

try:
    dbglevel = int(os.getenv("DBGLEVEL") or 0)
except:
    dbglevel = 0

version = "0.2.0"
conf = {"version": version}
plugin = "owncloudannex-" + version

pwd = os.path.realpath(__file__)
pwd = pwd[:pwd.rfind("/")]
if dbglevel:
    sys.stderr.write("Path: " + repr(pwd) + "\n")

sys.path.append(pwd + '/lib')

import CommonFunctions as common

import davlib
client = False
encAuth = False

def login(user, pword):
    common.log("")
    global client, encAuth
    
    base = conf["url"]
    base = base[base.find("//") + 2: base.find("/", 8)]
    encAuth = {"Authorization": "Basic %s" % ( base64.encodestring(user+":"+pword).strip() ) }
    common.log("Using base: " + base + " - " +  repr(encAuth))
    client = davlib.DAV(base, protocol="https")
    client.set_debuglevel(0)

    test = client.propfind("/remote.php/webdav", depth=1, extra_hdrs=encAuth)
    test = test.read().replace("<D:", "<d:").replace("</D:", "</d:") # Box.com fix
    if test.find("d:error") == -1:
        common.log("Done")
        return True
    else:
        common.log("Failure, couldn't properly login: " + test, 1)
        return False

class CancelledError(Exception):
    def __init__(self, msg):
        self.msg = msg
        Exception.__init__(self, msg)

    def __str__(self):
        return self.msg

    __repr__ = __str__

class BufferReader(io.BytesIO):
    def __init__(self, buf=b'',
                 callback=None,
                 cb_args=(),
                 cb_kwargs={}):
        self._callback = callback
        self._cb_args = cb_args
        self._cb_kwargs = cb_kwargs
        self._progress = 0
        self._len = len(buf)
        io.BytesIO.__init__(self, buf)

    def __len__(self):
        return self._len

    def read(self, n=-1):
        chunk = io.BytesIO.read(self, n)
        self._progress += int(len(chunk))
        self._cb_kwargs.update({
            'size'    : self._len,
            'progress': self._progress
        })
        if self._callback:
            try:
                self._callback(*self._cb_args, **self._cb_kwargs)
            except: # catches exception from the callback
                raise CancelledError('The upload was cancellede.')
        return chunk

def postFile(subject, filename, folder):
    common.log("%s to %s - %s" % ( repr(filename), folder[0], subject))
    
    tmp_file = findInFolder(subject, folder)
    if tmp_file:
        common.log("File already exists: " + repr(tmp_file))
        return True

    base = conf["url"]
    tpath = ("%s%s%s" % (base, folder, subject)).replace("//", "/").replace(":/", "://")
    common.log("tpath: " + repr(tpath))

    data = common.readFile(filename, 'rb')
    fh = BufferReader(data, common.progress)

    try:
        response = client.put(tpath, fh, "application/octet-stream", None, encAuth)
    except Exception as e:
        common.log("Exception: " + repr(e), -1)
        return False

    if response:
        cont = response.read()
        if response.status == 201:
            common.log("Done: " + repr(cont))
            return True
        if response.status == 413:
            common.log("Error. Filesize too big")
            common.updateWanted(os.path.getsize(filename) - 200000, False)
            return False
    common.log("Failure: " + repr(response.read()) + " - " + repr(response.status), -1)
    return False

def findInFolder(subject, folder="/"):
    common.log("%s(%s) - %s(%s)" % (repr(subject), type(subject), repr(folder), type(folder)), 0)
    if folder[0] != "/":
        folder = "/" + folder
    host = conf["url"][:conf["url"].find("/", 8)]
    base = conf["url"][conf["url"].find("/", 8):]
    tpath = (base + folder).replace("//", "/")
    tpath = tpath[:len(tpath)-1]
    try:
        bla = client.propfind(tpath, depth=1, extra_hdrs=encAuth)
    except Exception as e:
        common.log("Exception: " + repr(e))
        try:
            login(conf["uname"], conf["pword"])
            bla = client.propfind(tpath, depth=1, extra_hdrs=encAuth)
        except Exception as e:
            common.log("Exception2: " + repr(e))

    content = bla.read()
    content = content.replace("<D:", "<d:").replace("</D:", "</d:") # Box.com fix
    common.log("propfind: " + tpath + " - " + repr(content))

    for tmp_file in common.parseDOM(content, "d:href"):
        tmp_file = urllib.unquote_plus(tmp_file)
        tmp_file = tmp_file.replace(host, "")
        tmp_path = (base + folder +  subject).replace("//", "/")
        common.log("folder: " + tmp_file + " - " + tmp_path, 3)
        if tmp_file == tmp_path or tmp_file == tmp_path + "/":
            tmp_file = folder + subject
            common.log("Done: " + repr(tmp_file))
            return tmp_file
    common.log("Failure")

def checkFile(subject, folder):
    common.log(subject)
    global m

    tmp_file = findInFolder(subject, folder)
    if tmp_file:
        common.log("Found: " + repr(tmp_file))
    else:
        common.log("Failure")
    return tmp_file

def getFile(subject, filename, folder):
    common.log(subject + " - " + folder + " - " + repr(filename))
    global m

    def p_read(amt=None):
        if response.fp is None:
            return ''

        if response._method == 'HEAD':
            response.close()
            return ''

        if response.chunked:
            return response._read_chunked(amt)

        if amt is None:
            # unbounded read     
            if response.length is None:
                s = response.fp.read()
                common.log("READING fp", 2)
            else:
                s = ""
                common.log("READING : " + repr(response.length), 2)
                chunksize = response.length / 100
                if chunksize < 4096:
                    chunksize = 4096
                while len(s) < response.length:
                    common.log("READING : " + repr(response.length) + " - " + repr(len(s)), 3)
                    tsize = response.length - len(s)
                    if tsize > chunksize:
                        tsize = chunksize
                    s += response._safe_read(tsize)
                    common.progress(response.length, len(s))
                response.length = 0
            response.close()        # we read everything     
            return s

        if response.length is not None:
            if amt > response.length:
                # clip the read to the "end of response"        
                amt = response.length

        # we do not use _safe_read() here because this may be a .will_close     
        # connection, and the user is reading more bytes than will be provided  
        # (for example, reading in 1k chunks)                                   
        s = response.fp.read(amt)
        if response.length is not None:
            response.length -= len(s)
            if not response.length:
                response.close()
        return s


    
    tmp_file = findInFolder(subject, folder)
    if tmp_file:
        base = conf["url"][conf["url"].find("/", 8):]
        tmp_file = (base + tmp_file).replace("//", "/")
        common.log("tmp_file: " + repr(tmp_file))
        response = client.get(tmp_file, encAuth)

        if response.status == 200:
            common.log("Getting data")
            response.org_read = response.read
            response.read = p_read
            cont = response.read()
            response.read = response.org_read
            common.log("Got data: " + repr(len(cont)))
            common.saveFile(filename, cont, "wb")
            common.log("Done")
            return True
    common.log("Failure")
    return False

def deleteFile(subject, folder):
    common.log(subject)
    global m

    tmp_file = findInFolder(subject, folder)

    if tmp_file:
        base = conf["url"][conf["url"].find("/", 8):]
        response = client.delete(base + tmp_file, encAuth)
        common.log("response: " + repr(response))
        if response.status == 204:
            common.log("Done: " + repr(response.read()))
            return True
    common.log("Failure")
    return False


def createFolder(path):
    common.log(path)
    if path.find("/") > -1:
        folder = path[:path.rfind("/")]
        name = path[path.rfind("/") + 1:]
    else:
        folder = "/"
        name = path
    base = conf["url"][conf["url"].find("/", 8):]
    tpath = (base + path + "/").replace("//", "/")
    res = client.mkcol(tpath, encAuth)
    content = res.read()
    if res.status == 201:
        common.log("Done: " + repr(res.status) + " - " + repr(content))
        return path
    common.log("Failure: " + repr(res.status) + " - " + repr(content))

def setFolder(base, keys):
    common.log(repr(base) + " - " + repr(keys))
    folder = findInFolder(base)
    keys = keys.replace("VALUE ", "").split("/")
    if folder:
        common.log("Using folder: " + repr(folder))
        ANNEX_FOLDER = folder + "/"
    else:
        folder = createFolder("/" + base)
        common.log("created folder0: " + repr(folder))
        ANNEX_FOLDER = folder + "/"

    folder = findInFolder(keys[0], ANNEX_FOLDER)
    if folder:
        common.log("Using folder1: " + repr(folder))
        ANNEX_FOLDER = folder + "/"
    elif keys[0]:
        folder = createFolder(ANNEX_FOLDER + "/" + keys[0])
        common.log("created folder1: " + repr(folder))
        ANNEX_FOLDER = folder + "/"

    folder = findInFolder(keys[1], ANNEX_FOLDER)

    if folder:
        common.log("Using folder2: " + repr(folder))
        ANNEX_FOLDER = folder + "/"
    elif keys[1]:
        folder = createFolder(ANNEX_FOLDER + "/" + keys[1])
        common.log("created folder2: " + repr(folder))
        ANNEX_FOLDER = folder + "/"
    return ANNEX_FOLDER

## gaproto interface

def initremote(line):
    common.log("")
    uname = os.getenv("USERNAME") or ""
    pword = os.getenv("PASSWORD") or ""

    url = common.getConfig("url")
    myfolder = common.getConfig("folder")
    encryption = common.getConfig("encryption")

    if len(uname) and len(pword) and len(url) and len(myfolder):
        common.sprint('SETCREDS mycreds ' + uname + ' ' + pword)
        common.sprint('INITREMOTE-SUCCESS')
    else:
        common.sprint('INITREMOTE-FAILURE You need to set USERNAME and PASSWORD environment variables and folder, url and encryption parameters when running initremote.')
    common.log("Done")

def prepare(line):
    common.log("")
    creds = common.getCreds()

    url = common.getConfig("url")
    myfolder = common.getConfig("folder")
    encryption = common.getConfig("encryption")

    if len(creds) > 2 and len(url) and len(myfolder) and ( len(creds[1]) and len(creds[2])):
        conf["uname"] = creds[1]
        conf["pword"] = creds[2]
        conf["url"] = url
        conf["folder"] = myfolder
        common.updateWanted(False, False)
        common.sprint('DEBUG ' + plugin)
        if login(creds[1], creds[2]):
            common.sprint('PREPARE-SUCCESS')
        else:
            common.sprint('PREPARE-FAILURE Login failure.')
    else:
        common.sprint('PREPARE-FAILURE You need to set USERNAME and PASSWORD environment variables and folder, url and encryption parameters for the remote.')
    common.log("")
def transfer(line):
    common.log(repr(line))
    folder = setFolder(conf["folder"], common.ask("DIRHASH " + line[2]))

    if line[1] == "STORE":
        if postFile(line[2], " ".join(line[3:]), folder):
            common.sprint('TRANSFER-SUCCESS STORE ' + line[2] + '')
        else:
            common.sprint('TRANSFER-FAILURE STORE ' + line[2] + ' File could not be stored')
    if line[1] == "RETRIEVE":
        if getFile(line[2], " ".join(line[3:]), folder):
            common.sprint('TRANSFER-SUCCESS RETRIEVE ' + line[2] + '')
        else:
            common.sprint('TRANSFER-FAILURE RETRIEVE ' + line[2] + ' File could not be retrieved')
    common.log("Done")

def checkpresent(line):
    common.log("")
    folder = setFolder(conf["folder"], common.ask("DIRHASH " + line[1]))
    if not len(folder):
        common.sprint('CHECKPRESENT-UNKNOWN ' + line[1] + ' this remote is not currently available')
        return None

    if checkFile(line[1], folder):
        common.sprint('CHECKPRESENT-SUCCESS ' + line[1] + '')
    else:
        common.sprint('CHECKPRESENT-FAILURE ' + line[1] + '')
    common.log("Done")

def remove(line):
    common.log("")
    folder = setFolder(conf["folder"], common.ask("DIRHASH " + line[1]))

    if deleteFile(line[1], folder):
        common.sprint('REMOVE-SUCCESS ' + line[1] + '')
    else:
        common.sprint('REMOVE-FAILURE ' + line[1] + ' This file could not be removed')
    common.log("Done")

def getCost():
    common.log("", 3)
    common.sprint("COST 150")

t = time.time()
common.log("START")
if __name__ == '__main__':
    common.startRemote()
common.log("STOP: %ss" % int(time.time() - t))
